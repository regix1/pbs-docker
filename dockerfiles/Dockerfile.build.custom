# Custom Dockerfile.build that doesn't modify the original
# This file handles ARM64 builds properly without the xtr package issue
ARG IMAGE_PREFIX=
FROM ${IMAGE_PREFIX}debian:trixie AS toolchain

RUN apt-get -y update && \
  apt-get -y install \
    build-essential git-core \
    lintian pkg-config quilt patch cargo \
    nodejs node-colors node-commander \
    libudev-dev libapt-pkg-dev \
    libacl1-dev libpam0g-dev libfuse3-dev \
    libsystemd-dev uuid-dev libssl-dev \
    libclang-dev libjson-perl libcurl4-openssl-dev \
    dh-exec dh-nodejs wget rsync \
    dpkg-dev

ENV CARGO_HOME=/cargo \
  RUSTUP_HOME=/rustup \
  PATH="/cargo/bin:$PATH"

RUN wget https://static.rust-lang.org/rustup/rustup-init.sh && \
  chmod +x rustup-init.sh && \
  ./rustup-init.sh -y && \
  cargo install debcargo cargo-deb && \
  rustc --version

# Handle xtr package - build it but handle installation gracefully
ADD packages/ /src/packages/

# Build xtr and install it (needed as dependency for proxmox-i18n)
RUN cd /src/packages/xtr && \
    cargo build --release && \
    cargo deb --no-build --no-strip && \
    (dpkg -i target/debian/*.deb || \
     (echo "dpkg install failed, installing binary directly" && \
      cp target/release/xtr /usr/local/bin/xtr && \
      chmod +x /usr/local/bin/xtr)) && \
    # Make xtr available to the build system
    which xtr && \
    xtr --version || echo "xtr installed to /usr/local/bin/"

# Specify default rust toolchain
ENV RUSTUP_TOOLCHAIN=1.87

# Link /cargo/bin to /usr/local/bin
RUN ln -s /cargo/bin/* /usr/local/bin/
ADD /scripts/toolchain/ /usr/local/bin/

WORKDIR /src
ADD dockerfiles/gitconfig /etc/gitconfig

FROM toolchain as builder

ADD /scripts/build /src/scripts/build
ADD /repos /src/repos

RUN ./scripts/build/make.bash pve-eslint make_dinstall
RUN ./scripts/build/make.bash proxmox-biome make_dinstall
RUN ./scripts/build/make.bash proxmox-widget-toolkit make_dinstall
RUN ./scripts/build/make.bash perlmod "dpkg_build perlmod-bin" "dpkg_install"
RUN ./scripts/build/make.bash proxmox-perl-rs "make_deb common/pkg" "make_deb pve-rs" dpkg_install
RUN ./scripts/build/make.bash pve-common make_dinstall
RUN ./scripts/build/make.bash extjs make_deb
RUN ./scripts/build/make.bash proxmox-i18n make_deb
RUN ./scripts/build/make.bash proxmox-mini-journalreader make_deb
RUN ./scripts/build/make.bash libjs-qrcodejs make_deb
RUN ./scripts/build/make.bash proxmox-acme make_deb
RUN ./scripts/build/make.bash pve-xtermjs "make_deb termproxy" "make_deb xterm.js"
RUN ./scripts/build/make.bash proxmox-backup --rust 1.85 make_deb

#=================================

FROM ${IMAGE_PREFIX}debian:trixie AS deb_env

# Generate release package
COPY --from=builder /src/release/ /release/

# Bundle server
ARG VERSION
ARG ARCH
ARG TAG
ADD /scripts/release /src/scripts/release
RUN /src/scripts/release/apt-install.bash --gen /release/install /release proxmox-backup-server

# Create the bundle with proper naming
# The bundle script creates the .tgz file
RUN echo "Creating bundle for TAG=${TAG}, VERSION=${VERSION}, ARCH=${ARCH}" && \
    if [ -n "${TAG}" ]; then \
      BUNDLE_NAME="/proxmox-backup-server-${TAG}-${ARCH:-$(dpkg --print-architecture)}.tgz"; \
    elif [ -n "${VERSION}" ]; then \
      BUNDLE_NAME="/proxmox-backup-server-${VERSION}-${ARCH:-$(dpkg --print-architecture)}.tgz"; \
    else \
      BUNDLE_NAME="/proxmox-backup-server-latest-${ARCH:-$(dpkg --print-architecture)}.tgz"; \
    fi && \
    echo "Creating bundle: ${BUNDLE_NAME}" && \
    /src/scripts/release/bundle-tgz.bash "${BUNDLE_NAME}" /release/. && \
    ls -la /*.tgz 2>/dev/null || echo "No .tgz files created yet"

#=================================

FROM ${IMAGE_PREFIX}debian:trixie AS release_env

# Copy packages
COPY --from=deb_env /release/ /release/

# IMPORTANT: Copy the .tgz file to root for extraction by the workflow
COPY --from=deb_env /proxmox-backup-server-*.tgz /

# Install base packages
RUN export DEBIAN_FRONTEND=noninteractive && \
  apt-get -y update && \
  apt install -y runit ssmtp cron && \
  /release/install

# Add default configs
ADD /dockerfiles/pbs/ /etc/proxmox-backup-default/

VOLUME /etc/proxmox-backup
VOLUME /var/log/proxmox-backup
VOLUME /var/lib/proxmox-backup

ADD /dockerfiles/runit/ /runit/
CMD ["runsvdir", "/runit"]