name: Build PBS No Nag from Source

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the image'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: regix1/pbs-docker

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version info
        id: version
        run: |
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            VERSION=$(date +%Y%m%d)-${{ github.run_number }}
          fi
          TAG="${{ github.event.inputs.tag_name || 'latest' }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}, tag: ${TAG}"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.arch }}
            type=ref,event=pr,suffix=-${{ matrix.arch }}
            type=raw,value=${{ matrix.arch }}-latest,enable={{is_default_branch}}
            type=raw,value=${{ matrix.arch }}-${{ steps.version.outputs.tag }}
            type=sha,prefix=${{ matrix.arch }}-,format=short

      # Build the base PBS image from source
      - name: Build PBS from source
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/Dockerfile.build
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ github.sha }}
          cache-from: type=gha,scope=${{ matrix.arch }}-source
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}-source
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            TAG=${{ steps.version.outputs.tag }}
            IMAGE_PREFIX=${{ matrix.arch == 'arm64' && 'arm64v8/' || '' }}

      # Apply the custom layer with subscription removal
      - name: Build custom layer with no-nag
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/Dockerfile.custom
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.arch }}-custom
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}-custom
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ github.sha }}

  create-manifest:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version info
        id: version
        run: |
          TAG="${{ github.event.inputs.tag_name || 'latest' }}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Create and push multi-arch manifest for latest
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-latest
          
          docker manifest annotate \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-latest \
            --arch amd64
          
          docker manifest annotate \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-latest \
            --arch arm64
          
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Create and push multi-arch manifest for specific tag
        if: steps.version.outputs.tag != 'latest'
        run: |
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${{ steps.version.outputs.tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${{ steps.version.outputs.tag }}
          
          docker manifest annotate \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${{ steps.version.outputs.tag }} \
            --arch amd64
          
          docker manifest annotate \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${{ steps.version.outputs.tag }} \
            --arch arm64
          
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }}