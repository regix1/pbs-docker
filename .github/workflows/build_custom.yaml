name: Build Custom PBS to GHCR

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.github/workflows/build_test.yaml'
      - '.github/workflows/build_pre_release.yaml'
      - '.github/workflows/make_release.yaml'
  pull_request:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the image'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-base:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define version and tag
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          VERSION=$(date +%Y%m%d)-${{ github.run_number }}
        fi
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TAG="pr-${{ github.event.pull_request.number }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ inputs.tag_name }}"
        else
          TAG="latest"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}, tag: ${TAG}"

    # Build the BASE PBS image from source (unchanged from original)
    - name: Build base PBS from source
      uses: docker/build-push-action@v5
      with:
        context: .
        file: dockerfiles/Dockerfile.build
        platforms: linux/${{ matrix.arch }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ github.sha }}
        cache-from: type=gha,scope=base-${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=base-${{ matrix.arch }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          TAG=${{ steps.version.outputs.tag }}
          IMAGE_PREFIX=${{ matrix.arch == 'arm64' && 'arm64v8/' || '' }}

  build-custom:
    needs: build-base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define version and tag
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          VERSION=$(date +%Y%m%d)-${{ github.run_number }}
        fi
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TAG="pr-${{ github.event.pull_request.number }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ inputs.tag_name }}"
        else
          TAG="latest"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ matrix.arch }}-${{ steps.version.outputs.tag }}
          type=raw,value=${{ matrix.arch }}-latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=sha,prefix=${{ matrix.arch }}-

    # Apply the CUSTOM layer with subscription removal on top of base
    - name: Build custom layer with no-nag
      uses: docker/build-push-action@v5
      with:
        context: .
        file: dockerfiles/Dockerfile.custom
        platforms: linux/${{ matrix.arch }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=custom-${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=custom-${{ matrix.arch }}
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ github.sha }}

  create-manifest:
    needs: [build-custom]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ inputs.tag_name }}"
        else
          TAG="latest"
        fi
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Create and push multi-arch manifest
      run: |
        # Create manifest for the specific tag
        docker manifest create \
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }} \
          ghcr.io/${{ github.repository }}:amd64-${{ steps.version.outputs.tag }} \
          ghcr.io/${{ github.repository }}:arm64-${{ steps.version.outputs.tag }}
        
        docker manifest annotate \
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }} \
          ghcr.io/${{ github.repository }}:amd64-${{ steps.version.outputs.tag }} \
          --arch amd64
        
        docker manifest annotate \
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }} \
          ghcr.io/${{ github.repository }}:arm64-${{ steps.version.outputs.tag }} \
          --arch arm64
        
        docker manifest push ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}
        
        # Also create 'latest' manifest if this is main branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          docker manifest create \
            ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:amd64-latest \
            ghcr.io/${{ github.repository }}:arm64-latest
          
          docker manifest annotate \
            ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:amd64-latest \
            --arch amd64
          
          docker manifest annotate \
            ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:arm64-latest \
            --arch arm64
          
          docker manifest push ghcr.io/${{ github.repository }}:latest
        fi

    - name: Print image info
      run: |
        echo "âœ… Image published to GHCR:"
        echo "  Multi-arch: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}"
        echo "  AMD64: ghcr.io/${{ github.repository }}:amd64-${{ steps.version.outputs.tag }}"
        echo "  ARM64: ghcr.io/${{ github.repository }}:arm64-${{ steps.version.outputs.tag }}"
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "  Latest: ghcr.io/${{ github.repository }}:latest"
        fi