name: Build and Release Docker Images

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_override:
        description: 'Override tag name (leave empty to use release tag)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-base:
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm  # Native ARM64 runner
            platform: linux/arm64
    
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU (AMD64 only)
      if: matrix.arch == 'amd64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define version and tag
      id: version
      run: |
        # Get version from release tag or workflow dispatch input
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
          TAG="${{ github.event.release.tag_name }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.tag_override }}" ]]; then
          VERSION="${{ inputs.tag_override }}"
          TAG="${{ inputs.tag_override }}"
        elif [ -f VERSION ]; then
          VERSION=$(cat VERSION)
          TAG="v${VERSION}"
        else
          VERSION=$(date +%Y%m%d)-${{ github.run_number }}
          TAG="v${VERSION}"
        fi
        
        # Remove 'v' prefix if present for VERSION
        VERSION=${VERSION#v}
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}, tag: ${TAG}"
        echo "Running on native $(uname -m) architecture"

    # Build the BASE PBS image using custom Dockerfile
    - name: Build base PBS from source
      uses: docker/build-push-action@v5
      with:
        context: .
        file: dockerfiles/Dockerfile.build.custom
        platforms: ${{ matrix.platform }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ steps.version.outputs.tag }}
        cache-from: type=gha,scope=base-${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=base-${{ matrix.arch }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          TAG=${{ steps.version.outputs.tag }}
          IMAGE_PREFIX=${{ matrix.arch == 'arm64' && 'arm64v8/' || '' }}
          TARGETARCH=${{ matrix.arch }}
          ARCH=${{ matrix.arch }}

  build-custom:
    needs: build-base
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
    
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU (AMD64 only)
      if: matrix.arch == 'amd64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define version and tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
          TAG="${{ github.event.release.tag_name }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.tag_override }}" ]]; then
          VERSION="${{ inputs.tag_override }}"
          TAG="${{ inputs.tag_override }}"
        elif [ -f VERSION ]; then
          VERSION=$(cat VERSION)
          TAG="v${VERSION}"
        else
          VERSION=$(date +%Y%m%d)-${{ github.run_number }}
          TAG="v${VERSION}"
        fi
        
        VERSION=${VERSION#v}
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ matrix.arch }}-${{ steps.version.outputs.tag }}
          type=raw,value=${{ matrix.arch }}-latest
          type=sha,prefix=${{ matrix.arch }}-,format=short

    # Apply the custom layer with subscription removal
    - name: Build custom layer with no-nag
      uses: docker/build-push-action@v5
      with:
        context: .
        file: dockerfiles/Dockerfile.custom
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=custom-${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=custom-${{ matrix.arch }}
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ steps.version.outputs.tag }}
        provenance: false

  create-manifest:
    needs: [build-custom]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          TAG="${{ github.event.release.tag_name }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.tag_override }}" ]]; then
          TAG="${{ inputs.tag_override }}"
        elif [ -f VERSION ]; then
          TAG="v$(cat VERSION)"
        else
          TAG="v$(date +%Y%m%d)-${{ github.run_number }}"
        fi
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Create and push multi-arch manifest
      run: |
        TAG="${{ steps.version.outputs.tag }}"
        REPO="ghcr.io/${{ github.repository }}"
        
        # Create manifest for the specific version tag
        docker manifest rm ${REPO}:${TAG} 2>/dev/null || true
        
        docker manifest create --amend \
          ${REPO}:${TAG} \
          ${REPO}:amd64-${TAG} \
          ${REPO}:arm64-${TAG}
        
        docker manifest annotate \
          ${REPO}:${TAG} \
          ${REPO}:amd64-${TAG} \
          --arch amd64
        
        docker manifest annotate \
          ${REPO}:${TAG} \
          ${REPO}:arm64-${TAG} \
          --arch arm64
        
        docker manifest push ${REPO}:${TAG}
        
        # Also create/update 'latest' manifest
        docker manifest rm ${REPO}:latest 2>/dev/null || true
        
        docker manifest create --amend \
          ${REPO}:latest \
          ${REPO}:amd64-latest \
          ${REPO}:arm64-latest
        
        docker manifest annotate \
          ${REPO}:latest \
          ${REPO}:amd64-latest \
          --arch amd64
        
        docker manifest annotate \
          ${REPO}:latest \
          ${REPO}:arm64-latest \
          --arch arm64
        
        docker manifest push ${REPO}:latest

    - name: Print image info
      run: |
        echo "âœ… Docker images published to GHCR:"
        echo "  Multi-arch: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}"
        echo "  Multi-arch: ghcr.io/${{ github.repository }}:latest"
        echo "  AMD64: ghcr.io/${{ github.repository }}:amd64-${{ steps.version.outputs.tag }}"
        echo "  ARM64: ghcr.io/${{ github.repository }}:arm64-${{ steps.version.outputs.tag }}"
        echo ""
        echo "ðŸ“¦ Pull commands:"
        echo "  docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}"
        echo "  docker pull ghcr.io/${{ github.repository }}:latest"

  # Optional: Create release assets with pre-built binaries
  create-release-assets:
    needs: [build-custom]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
      packages: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract and upload release assets
      run: |
        TAG="${{ github.event.release.tag_name }}"
        REPO="ghcr.io/${{ github.repository }}"
        
        # Create temporary directory for assets
        mkdir -p release-assets
        
        # Extract server and client binaries from Docker images (if they exist)
        for ARCH in amd64 arm64; do
          echo "Extracting assets for ${ARCH}..."
          
          # Pull the image
          docker pull ${REPO}:${ARCH}-${TAG}
          
          # Create container and extract files if they exist
          CONTAINER_ID=$(docker create ${REPO}:${ARCH}-${TAG})
          
          # Try to extract server bundle if it exists
          if docker cp ${CONTAINER_ID}:/proxmox-backup-server-${TAG}-${ARCH}.tgz release-assets/ 2>/dev/null; then
            echo "Extracted server bundle for ${ARCH}"
          fi
          
          # Try to extract client bundle if it exists
          if docker cp ${CONTAINER_ID}:/proxmox-backup-client-${TAG}-${ARCH}.tgz release-assets/ 2>/dev/null; then
            echo "Extracted client bundle for ${ARCH}"
          fi
          
          docker rm ${CONTAINER_ID}
        done
        
        # Upload assets to release if any were extracted
        if ls release-assets/*.tgz 1> /dev/null 2>&1; then
          for file in release-assets/*.tgz; do
            echo "Uploading $(basename $file) to release..."
            gh release upload ${TAG} "$file" --clobber
          done
        else
          echo "No release assets found to upload"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}