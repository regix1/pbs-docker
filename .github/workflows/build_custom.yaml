name: Release PBS Docker Images

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for manual release (e.g., v4.0.13-1)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
    
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU (AMD64 only)
      if: matrix.arch == 'amd64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine version and tag
      id: version
      run: |
        # Get tag from release event or workflow_dispatch input
        if [[ "${{ github.event_name }}" == "release" ]]; then
          TAG="${{ github.event.release.tag_name }}"
        elif [[ -n "${{ inputs.tag_name }}" ]]; then
          TAG="${{ inputs.tag_name }}"
        else
          echo "Error: No tag specified"
          exit 1
        fi
        
        # Remove 'v' prefix for VERSION if present
        VERSION="${TAG#v}"
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building: TAG=${TAG}, VERSION=${VERSION}, ARCH=${{ matrix.arch }}"

    # Build Stage 1: Base PBS image
    - name: Build base PBS image
      id: build-base
      uses: docker/build-push-action@v5
      with:
        context: .
        file: dockerfiles/Dockerfile.build.custom
        platforms: ${{ matrix.platform }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ steps.version.outputs.tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ github.sha }}
        cache-from: type=gha,scope=base-${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=base-${{ matrix.arch }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          TAG=${{ steps.version.outputs.tag }}
          ARCH=${{ matrix.arch }}
          IMAGE_PREFIX=${{ matrix.arch == 'arm64' && 'arm64v8/' || '' }}
          TARGETARCH=${{ matrix.arch }}

    # Build Stage 2: Custom layer with subscription removal
    - name: Build custom PBS image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: dockerfiles/Dockerfile.custom
        platforms: ${{ matrix.platform }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-${{ steps.version.outputs.tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-latest
        labels: |
          org.opencontainers.image.title=Proxmox Backup Server
          org.opencontainers.image.description=PBS with subscription nag removed
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
        cache-from: type=gha,scope=custom-${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=custom-${{ matrix.arch }}
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ steps.version.outputs.tag }}
        provenance: false

    # Extract and upload release assets (the .tgz files)
    - name: Extract release assets from base image
      if: github.event_name == 'release'
      run: |
        TAG="${{ steps.version.outputs.tag }}"
        VERSION="${{ steps.version.outputs.version }}"
        ARCH="${{ matrix.arch }}"
        REPO="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        
        echo "Extracting release assets from base image..."
        
        # Pull the base image
        docker pull ${REPO}:${ARCH}-base-${TAG}
        
        # Create a container from the base image
        CONTAINER_ID=$(docker create ${REPO}:${ARCH}-base-${TAG})
        
        # Create assets directory
        mkdir -p release-assets
        
        # Extract the PBS server bundle
        # The file should be at /proxmox-backup-server-{something}.tgz based on your Dockerfile
        echo "Looking for .tgz files in container..."
        
        # Try to find and extract the file
        docker export ${CONTAINER_ID} | tar -t | grep "proxmox-backup-server.*\.tgz$" | while read -r file; do
          echo "Found: $file"
          docker cp ${CONTAINER_ID}:/${file} release-assets/proxmox-backup-server-${TAG}-${ARCH}.tgz && break
        done
        
        # Clean up container
        docker rm ${CONTAINER_ID}
        
        # Upload to GitHub Release if we found the asset
        if [ -f release-assets/proxmox-backup-server-${TAG}-${ARCH}.tgz ]; then
          echo "Uploading proxmox-backup-server-${TAG}-${ARCH}.tgz to release..."
          gh release upload ${TAG} release-assets/proxmox-backup-server-${TAG}-${ARCH}.tgz --clobber
        else
          echo "Warning: No PBS server bundle found to upload"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-manifest:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          TAG="${{ github.event.release.tag_name }}"
        elif [[ -n "${{ inputs.tag_name }}" ]]; then
          TAG="${{ inputs.tag_name }}"
        else
          echo "Error: No tag specified"
          exit 1
        fi
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Create and push multi-arch manifests
      run: |
        TAG="${{ steps.version.outputs.tag }}"
        REPO="${{ env.REGISTRY }}/${{ github.repository }}"
        
        echo "Creating multi-arch manifest for ${TAG}..."
        
        # Create manifest for the specific version tag
        docker manifest rm ${REPO}:${TAG} 2>/dev/null || true
        docker manifest create ${REPO}:${TAG} \
          ${REPO}:amd64-${TAG} \
          ${REPO}:arm64-${TAG}
        
        docker manifest annotate ${REPO}:${TAG} \
          ${REPO}:amd64-${TAG} \
          --arch amd64 --os linux
        
        docker manifest annotate ${REPO}:${TAG} \
          ${REPO}:arm64-${TAG} \
          --arch arm64 --os linux
        
        docker manifest push ${REPO}:${TAG}
        
        # Create/update latest manifest
        echo "Creating multi-arch manifest for latest..."
        
        docker manifest rm ${REPO}:latest 2>/dev/null || true
        docker manifest create ${REPO}:latest \
          ${REPO}:amd64-latest \
          ${REPO}:arm64-latest
        
        docker manifest annotate ${REPO}:latest \
          ${REPO}:amd64-latest \
          --arch amd64 --os linux
        
        docker manifest annotate ${REPO}:latest \
          ${REPO}:arm64-latest \
          --arch arm64 --os linux
        
        docker manifest push ${REPO}:latest
        
        echo "âœ… Successfully created multi-arch manifests"
        echo ""
        echo "ðŸ“¦ Users can now pull:"
        echo "  docker pull ${REPO}:${TAG}"
        echo "  docker pull ${REPO}:latest"