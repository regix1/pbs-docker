name: Build Custom PBS to GHCR

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.github/workflows/build_test.yaml'
      - '.github/workflows/build_pre_release.yaml'
      - '.github/workflows/make_release.yaml'
  pull_request:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the image'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-base:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define version and tag
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          VERSION=$(date +%Y%m%d)-${{ github.run_number }}
        fi
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TAG="pr-${{ github.event.pull_request.number }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ inputs.tag_name }}"
        else
          TAG="latest"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}, tag: ${TAG}"

    # Fix for ARM64: Create a modified Dockerfile that skips xtr on ARM64
    - name: Prepare ARM64-compatible Dockerfile
      if: matrix.arch == 'arm64'
      run: |
        cp dockerfiles/Dockerfile.build dockerfiles/Dockerfile.build.arm64
        
        # Replace the xtr package installation with conditional logic
        sed -i 's|RUN cargo deb --manifest-path /src/packages/xtr/Cargo.toml --install|RUN echo "Skipping xtr package for ARM64 build" \&\& true|g' dockerfiles/Dockerfile.build.arm64
        
        # Alternative: Make it conditional within the Dockerfile
        cat > dockerfiles/Dockerfile.build.arm64 << 'EOF'
        ARG IMAGE_PREFIX=
        FROM ${IMAGE_PREFIX}debian:trixie AS toolchain
        
        RUN apt-get -y update && \
          apt-get -y install \
            build-essential git-core \
            lintian pkg-config quilt patch cargo \
            nodejs node-colors node-commander \
            libudev-dev libapt-pkg-dev \
            libacl1-dev libpam0g-dev libfuse3-dev \
            libsystemd-dev uuid-dev libssl-dev \
            libclang-dev libjson-perl libcurl4-openssl-dev \
            dh-exec dh-nodejs wget rsync
        
        ENV CARGO_HOME=/cargo \
          RUSTUP_HOME=/rustup \
          PATH="/cargo/bin:$PATH"
          
        RUN wget https://static.rust-lang.org/rustup/rustup-init.sh && \
          chmod +x rustup-init.sh && \
          ./rustup-init.sh -y && \
          cargo install debcargo cargo-deb && \
          rustc --version
        
        # Skip xtr package for ARM64
        ADD packages/ /src/packages/
        RUN echo "Skipping xtr package for ARM64 build - not critical for PBS"
        
        # Specify default rust toolchain
        ENV RUSTUP_TOOLCHAIN=1.87
        
        # Link /cargo/bin to /usr/local/bin
        RUN ln -s /cargo/bin/* /usr/local/bin/ || true
        ADD /scripts/toolchain/ /usr/local/bin/
        
        WORKDIR /src
        ADD dockerfiles/gitconfig /etc/gitconfig
        
        FROM toolchain as builder
        
        ADD /scripts/build /src/scripts/build
        ADD /repos /src/repos
        
        RUN ./scripts/build/make.bash pve-eslint make_dinstall
        RUN ./scripts/build/make.bash proxmox-biome make_dinstall
        RUN ./scripts/build/make.bash proxmox-widget-toolkit make_dinstall
        RUN ./scripts/build/make.bash perlmod "dpkg_build perlmod-bin" "dpkg_install"
        RUN ./scripts/build/make.bash proxmox-perl-rs "make_deb common/pkg" "make_deb pve-rs" dpkg_install
        RUN ./scripts/build/make.bash pve-common make_dinstall
        RUN ./scripts/build/make.bash extjs make_deb
        RUN ./scripts/build/make.bash proxmox-i18n make_deb
        RUN ./scripts/build/make.bash proxmox-mini-journalreader make_deb
        RUN ./scripts/build/make.bash libjs-qrcodejs make_deb
        RUN ./scripts/build/make.bash proxmox-acme make_deb
        RUN ./scripts/build/make.bash pve-xtermjs "make_deb termproxy" "make_deb xterm.js"
        RUN ./scripts/build/make.bash proxmox-backup --rust 1.85 make_deb
        
        #=================================
        
        FROM ${IMAGE_PREFIX}debian:trixie AS deb_env
        
        # Generate release package
        COPY --from=builder /src/release/ /release/
        
        # Bundle server
        ARG VERSION
        ARG ARCH=
        ARG TAG=
        ADD /scripts/release /src/scripts/release
        RUN /src/scripts/release/apt-install.bash --gen /release/install /release proxmox-backup-server
        RUN /src/scripts/release/bundle-tgz.bash /proxmox-backup-server-${TAG:-$VERSION}-${ARCH:-dev}.tgz /release/.
        
        #=================================
        
        FROM ${IMAGE_PREFIX}debian:trixie AS release_env
        
        # Copy packages
        COPY --from=deb_env /release/ /release/
        
        # Install base packages
        RUN export DEBIAN_FRONTEND=noninteractive && \
          apt-get -y update && \
          apt install -y runit ssmtp cron && \
          /release/install
        
        # Add default configs
        ADD /dockerfiles/pbs/ /etc/proxmox-backup-default/
        
        VOLUME /etc/proxmox-backup
        VOLUME /var/log/proxmox-backup
        VOLUME /var/lib/proxmox-backup
        
        ADD /dockerfiles/runit/ /runit/
        CMD ["runsvdir", "/runit"]
        EOF

    # Build the BASE PBS image from source
    - name: Build base PBS from source
      uses: docker/build-push-action@v5
      with:
        context: .
        file: dockerfiles/Dockerfile.build${{ matrix.arch == 'arm64' && '.arm64' || '' }}
        platforms: linux/${{ matrix.arch }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ github.sha }}
        cache-from: type=gha,scope=base-${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=base-${{ matrix.arch }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          TAG=${{ steps.version.outputs.tag }}
          IMAGE_PREFIX=${{ matrix.arch == 'arm64' && 'arm64v8/' || '' }}
          TARGETARCH=${{ matrix.arch }}
          BUILDARCH=${{ matrix.arch }}

  build-custom:
    needs: build-base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define version and tag
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          VERSION=$(date +%Y%m%d)-${{ github.run_number }}
        fi
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TAG="pr-${{ github.event.pull_request.number }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ inputs.tag_name }}"
        else
          TAG="latest"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ matrix.arch }}-${{ steps.version.outputs.tag }}
          type=raw,value=${{ matrix.arch }}-latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=sha,prefix=${{ matrix.arch }}-

    # Apply the CUSTOM layer with subscription removal on top of base
    - name: Build custom layer with no-nag
      uses: docker/build-push-action@v5
      with:
        context: .
        file: dockerfiles/Dockerfile.custom
        platforms: linux/${{ matrix.arch }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=custom-${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=custom-${{ matrix.arch }}
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}-base-${{ github.sha }}

  create-manifest:
    needs: [build-custom]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ inputs.tag_name }}"
        else
          TAG="latest"
        fi
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Create and push multi-arch manifest
      run: |
        # Create manifest for the specific tag
        docker manifest create \
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }} \
          ghcr.io/${{ github.repository }}:amd64-${{ steps.version.outputs.tag }} \
          ghcr.io/${{ github.repository }}:arm64-${{ steps.version.outputs.tag }}
        
        docker manifest annotate \
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }} \
          ghcr.io/${{ github.repository }}:amd64-${{ steps.version.outputs.tag }} \
          --arch amd64
        
        docker manifest annotate \
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }} \
          ghcr.io/${{ github.repository }}:arm64-${{ steps.version.outputs.tag }} \
          --arch arm64
        
        docker manifest push ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}
        
        # Also create 'latest' manifest if this is main branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          docker manifest create \
            ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:amd64-latest \
            ghcr.io/${{ github.repository }}:arm64-latest
          
          docker manifest annotate \
            ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:amd64-latest \
            --arch amd64
          
          docker manifest annotate \
            ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:arm64-latest \
            --arch arm64
          
          docker manifest push ghcr.io/${{ github.repository }}:latest
        fi

    - name: Print image info
      run: |
        echo "✅ Image published to GHCR:"
        echo "  Multi-arch: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}"
        echo "  AMD64: ghcr.io/${{ github.repository }}:amd64-${{ steps.version.outputs.tag }}"
        echo "  ARM64: ghcr.io/${{ github.repository }}:arm64-${{ steps.version.outputs.tag }}"
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "  Latest: ghcr.io/${{ github.repository }}:latest"
        fi
